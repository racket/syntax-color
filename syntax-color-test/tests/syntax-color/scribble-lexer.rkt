#lang scheme
(require syntax-color/scribble-lexer)

(define in (open-input-string "@|x #|10|#| @me[1 2 #| comment |# ]{10}"))

(define current-lexer-char (make-parameter #\@))

(define (color str)
  (define lexer
    (if (equal? (current-lexer-char) #\@)
      scribble-inside-lexer
      (make-scribble-inside-lexer #:command-char (current-lexer-char))))
  (with-handlers ((exn:fail? exn-message))
    (let ([in (open-input-string str)])
      (port-count-lines! in)
      (let loop ([mode #f])
        (let-values ([(lexeme type paren start end backup mode) (lexer in 0 mode)])
          (if (eq? type 'eof)
              null
              (cons (list start end type backup)
                    (loop mode))))))))

(define (test* str len-val line)
  (let ([v (color str)]
        [val (let loop ([pos 1][l len-val])
               (if (null? l)
                   null
                   (cons (list pos (+ pos (caar l)) (cadar l)
                               (if (null? (cddar l))
                                   0
                                   (caddar l)))
                         (loop (+ (+ pos (caar l))) (cdr l)))))])
    (unless (equal? v val)
      (eprintf "FAILED, line ~s\n" line)
      (cond [(string? v)
             (eprintf "~a\nexpected\n" v)]
            [else
             (eprintf " result\n")
             (pretty-print v (current-error-port))
             (eprintf " is not expected\n")])
      (pretty-print val (current-error-port))
      (eprintf "\n"))))

(define-syntax (test stx)
  (syntax-case stx ()
    [(_ str len-val)
     (with-syntax ([line (syntax-line stx)])
       #'(test* str len-val line))]))

(define-syntax (test/chars stx)
  (syntax-case stx ()
    [(_ chars str len-val)
     (with-syntax ([line (syntax-line stx)])
       #'(for ([char (in-list chars)])
           (parameterize ([current-lexer-char char])
             (test* (string-replace str "@" (string char)) len-val line))))]))

(define chars '(#\@ #\+ #\- #\\ #\^))

(test/chars chars "x" '((1 text)))
(test/chars chars "x{}" '((3 text)))
(test/chars chars "@x" '((1 parenthesis)
                         (1 symbol)))


(test/chars chars "@x str" '((1 parenthesis)
                             (1 symbol)
                             (4 text)))

(test/chars chars "@x[] str" '((1 parenthesis)
                               (1 symbol)
                               (1 parenthesis)
                               (1 parenthesis)
                               (4 text)))

(test/chars chars "@x[z] str" '((1 parenthesis)
                                (1 symbol)
                                (1 parenthesis)
                                (1 symbol)
                                (1 parenthesis)
                                (4 text)))

(test/chars (remove #\+ chars) "@x[z +1.5] str" '((1 parenthesis)
                                                  (1 symbol)
                                                  (1 parenthesis)
                                                  (1 symbol)
                                                  (1 white-space)
                                                  (4 constant)
                                                  (1 parenthesis)
                                                  (4 text)))

(define xzwstr-result    '((1 parenthesis)
                           (1 symbol) ; x
                           (1 parenthesis)
                           (1 symbol) ; z
                           (1 white-space)
                           (1 parenthesis)
                           (1 symbol) ; w
                           (1 parenthesis)
                           (2 text)
                           (1 parenthesis)
                           (1 parenthesis)
                           (4 text)))
(test/chars chars "@x[z @w{10}] str" xzwstr-result)

(test/chars chars "@x[a@b]{a}{b}" '((1 parenthesis)
                                    (1 symbol)
                                    (1 parenthesis)
                                    (3 symbol)
                                    (1 parenthesis)
                                    (1 parenthesis)
                                    (1 text)
                                    (1 parenthesis)
                                    (3 text)))
(test/chars chars "@x{{}}" '((1 parenthesis)
                             (1 symbol)
                             (1 parenthesis)
                             (1 parenthesis) ; {
                             (1 parenthesis) ; }
                             (1 parenthesis)))

(test/chars chars "@|x|str" '((2 parenthesis)
                              (1 symbol 2)
                              (1 parenthesis 3)
                              (3 text)))
(test/chars chars "@|x #|ok|#|str" '((2 parenthesis)
                                     (1 symbol 2)
                                     (1 white-space 3)
                                     (6 comment)
                                     (1 parenthesis)
                                     (3 text)))
(test/chars chars "@| x ; c\n| str" '((2 parenthesis)
                                      (1 white-space 2)
                                      (1 symbol)
                                      (1 white-space)
                                      (3 comment)
                                      (2 parenthesis)
                                      (4 text)))
(test/chars chars "@|(a|b|)|str" '((2 parenthesis)
                                   (1 parenthesis 2)
                                   (4 symbol 3)
                                   (1 parenthesis 7)
                                   (1 parenthesis 8)
                                   (3 text)))

(test/chars chars "@#|bad|#x str" '((1 parenthesis)
                                    (7 error)
                                    (1 symbol)
                                    (4 text)))
(test/chars chars "@@x" '((1 parenthesis)
                          (1 parenthesis)
                          (1 symbol)))
(test/chars chars "@|@x|z" '((2 parenthesis)
                             (1 parenthesis 2)
                             (1 symbol)
                             (1 parenthesis)
                             (1 text)))
(test/chars chars "@@x[1 2][3]" '((1 parenthesis)
                                  (1 parenthesis)
                                  (1 symbol)
                                  (1 parenthesis)
                                  (1 constant)
                                  (1 white-space)
                                  (1 constant)
                                  (1 parenthesis)
                                  (1 parenthesis)
                                  (1 constant)
                                  (1 parenthesis)))

(test/chars chars "@{1 2}" '((2 parenthesis)
                             (3 text)
                             (1 parenthesis)))
(test/chars chars "@|=={1 2}==|" '((5 parenthesis)
                                   (3 text)
                                   (4 parenthesis)))
(test/chars chars "@'{1 2}" '((1 parenthesis)
                              (1 constant)
                              (1 parenthesis)
                              (3 text)
                              (1 parenthesis)))
(test/chars chars "@',#,#`|>>{1 2}<<|" '((1 parenthesis)
                                         (1 constant) ; ,
                                         (1 other)    ; ,
                                         (2 other)    ; #,
                                         (2 constant) ; #`
                                         (4 parenthesis)
                                         (3 text)
                                         (4 parenthesis)))

(test/chars chars "@x|{10}|" '((1 parenthesis)
                               (1 symbol)
                               (2 parenthesis)
                               (2 text)
                               (2 parenthesis)))
(test/chars chars "@x|{@q}|" '((1 parenthesis)
                               (1 symbol)
                               (2 parenthesis)
                               (2 text)
                               (2 parenthesis)))
(test/chars chars "@x|!!{@q}!!|" '((1 parenthesis)
                                   (1 symbol)
                                   (4 parenthesis)
                                   (2 text)
                                   (4 parenthesis)))
(test/chars chars "@x|(({@q}))|" '((1 parenthesis)
                                   (1 symbol)
                                   (4 parenthesis)
                                   (2 text)
                                   (4 parenthesis)))
(test/chars chars "@x|<<{a|<<@a[10]}>>|" '((1 parenthesis)
                                           (1 symbol)
                                           (4 parenthesis)
                                           (1 text)
                                           (4 parenthesis)
                                           (1 symbol)
                                           (1 parenthesis)
                                           (2 constant)
                                           (1 parenthesis)
                                           (4 parenthesis)))
(test/chars chars "@x|{ |{ } }|}|" '((1 parenthesis)
                                     (1 symbol)
                                     (2 parenthesis)
                                     (1 text)
                                     (2 parenthesis) ; |{
                                     (3 text)
                                     (2 parenthesis) ; }|
                                     (2 parenthesis)))

(test/chars chars "@`',@foo{blah}" '((1 parenthesis)
                                     (1 constant) ; `
                                     (1 constant) ; '
                                     (2 other)    ; ,@
                                     (3 symbol)
                                     (1 parenthesis)
                                     (4 text)
                                     (1 parenthesis)))

(test/chars chars "@; 1" '((4 comment)))
(test/chars chars "@; 1\nv" '((4 comment)
                  (1 white-space)
                  (1 text)))
(test/chars chars "@;{1}v" '((2 comment)
                             (1 parenthesis)
                             (1 text)
                             (1 parenthesis)
                             (1 text)))
(test/chars chars "@;|{1 }} }|v" '((2 comment)
                                   (2 parenthesis)
                                   (5 text)
                                   (2 parenthesis)
                                   (1 text)))

(test/chars chars "a\n  b" '((1 text)
                             (3 white-space)
                             (1 text)))
(test/chars chars "@item{A\nB}" '((1 parenthesis)
                                  (4 symbol)
                                  (1 parenthesis)
                                  (1 text)
                                  (1 white-space)
                                  (1 text)
                                  (1 parenthesis)))

(test/chars chars "@|()|})|" '((2 parenthesis)
                               (1 parenthesis 2)
                               (1 parenthesis 3)
                               (1 parenthesis 4)
                               (3 text)))
